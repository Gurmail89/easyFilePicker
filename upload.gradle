/**
 * JCenter publishing logic courtesy of https://www.virag.si/2015/01/publishing-gradle-android-library-to-jcenter/
 */
def siteUrl = 'https://github.com/hippo/hippo-core'      // Homepage URL of the library
def gitUrl = 'https://github.com/hippo/hippo-core.git'   // Git repository URL
group = "com.easyfilepicker"                            // Maven Group ID for the artifact

Properties moduleProperties = new Properties()
moduleProperties.load(project.file('module.properties').newDataInputStream())
println 'moduleProperties' + " ==> " + "$moduleProperties"
ext.artifactId = moduleProperties.getProperty("module.name")
println 'artifactId' + " ==> " + "$artifactId"
install {
    repositories.mavenInstaller {
        // This generates POM.xml with proper parameters
        pom {
            project {
                packaging 'aar'

                // Add your description here
                name moduleProperties.getProperty("module.pom_name")
                // http://stackoverflow.com/questions/30475780/how-to-change-the-default-artifactid-of-maven-metadata-xml-when-uploading-to-bin/30476385#30476385
                // artifactId = moduleProperties.getProperty("module.artifactId")
                description moduleProperties.getProperty("module.desc")
                url siteUrl

                println 'name' + " ==> " + "$name"
                println 'description' + " ==> " + "$description"
                // Set your license
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id 'easyfilepicker'
                        name 'Gurmail kang'
                        email 'gurmail@jugnoo.in'
                    }
                }
                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url siteUrl
                }
            }
        }
    }
}

task generateSourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier 'sources'
}

task generateJavadocs(type: Javadoc) {
    failOnError false
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath()
            .join(File.pathSeparator))
}

task generateJavadocsJar(type: Jar) {
    from generateJavadocs.destinationDir
    classifier 'javadoc'
}
generateJavadocsJar.dependsOn generateJavadocs

artifacts {
    archives generateJavadocsJar
    archives generateSourcesJar
}

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

def test = false

bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")

    configurations = ['archives']
    dryRun = test //Whether to run this as dry-run, without deploying
    publish = !test //If version should be auto published after an upload
    pkg {
        repo = moduleProperties.getProperty("module.repo")
        name = moduleProperties.getProperty("module.bintray")

        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = ["Apache-2.0"]
        publish = !test
        version {
            gpg {
                sign = true //Determines whether to GPG sign the files. The default is false
//                passphrase = properties.getProperty("bintray.gpg.password") //Optional. The passphrase for GPG signing'
            }
        }
    }
}